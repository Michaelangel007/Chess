// Original
    bitboard_t left2  = (origin & fileA & fileB) << 2;
    bitboard_t right2 = (origin & fileG & fileH) >> 2;

    bitboard_t above2 = origin << 16;
    bitboard_t below2 = origin >> 16;

    bitboard_t A = (right2        ) << 8; // this is simply <<  6
    bitboard_t B = (above2 & fileH) >> 1; // this is simply << 15
    bitboard_t C = (above2 & fileA) << 1; // this is simply << 17
    bitboard_t D = (left2         ) << 8; // this is simply << 10
    bitboard_t E = (left2         ) >> 8; // this is simply >>  6
    bitboard_t F = (below2 & fileA) << 1; // this is simply >> 15
    bitboard_t G = (below2 & fileH) >> 1; // this is simply >> 17
    bitboard_t H = (right2        ) >> 8; // this is simply >> 10

// Optimized (Broken)
    bitboard_t A = (origin & fileA & fileB) <<  6; // - 8+2
    bitboard_t B = (origin & fileA        ) << 15; // -16+1
    bitboard_t C = (origin &         fileH) << 17; // -16-1
    bitboard_t D = (origin & fileG & fileH) << 10; // - 8-2
    bitboard_t E = (origin & fileG & fileH) >>  6; // + 8-2
    bitboard_t F = (origin &         fileH) >> 15; // +16-1
    bitboard_t G = (origin & fileA        ) >> 17; // +16+1
    bitboard_t H = (origin & fileA & fileB) >> 10; // + 8+2

// Verified (Optimized)
    bitboard_t A = (origin <<  6) & fileA & fileB; // - 8+2
    bitboard_t B = (origin << 15) & fileA        ; // -16+1
    bitboard_t C = (origin << 17) &         fileH; // -16-1
    bitboard_t D = (origin << 10) & fileG & fileH; // - 8-2
    bitboard_t E = (origin >>  6) & fileG & fileH; // + 8-2
    bitboard_t F = (origin >> 15) &         fileH; // +16-1
    bitboard_t G = (origin >> 17) & fileA        ; // +16+1
    bitboard_t H = (origin >> 10) & fileA & fileB; // + 8+2


