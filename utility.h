/*
  0xRF = Rank File = 0xRowCol = 0xYX

  8 | 70 71 72 73 74 75 76 77
  7 | 60 61 62 63 64 65 66 67
  6 | 50 51 52 53 54 55 56 57
  5 | 40 41 42 43 44 45 46 47
  4 | 30 31 32 33 34 35 36 37
  3 | 20 21 22 23 24 25 26 27
  2 | 10 11 12 13 14 15 16 17
  1 | 00 01 02 03 04 05 06 07
    +------------------------
      A1 B1 C1 D1 E1 F1 G1 H1
*/

// i -> x,y
void CellToColRow( const uint8_t cell, uint8_t& col_, uint8_t& row_ )
{
    col_ = cell & 7;
    row_ = cell / 8; // >> 3
}


// i -> rf 
uint8_t CellToRankFile( const int cell )
{
    uint8_t col      = cell & 7;
    uint8_t row      = cell / 8; // >> 3
    uint8_t rankfile = (row << 4) + col;
    return  rankfile ;
}


// x,y -> i
uint8_t ColRowToCell( const uint8_t col, const uint8_t row )
{
    uint8_t cell = (row << 3) + col;
    return  cell ;
}


// x,y -> rf
uint8_t ColRowToRankFile( const uint8_t col, const uint8_t row )
{
    uint8_t rankfile = (row << 4) + col;
    return  rankfile ;
}


// rf -> i
uint8_t RankFileToCell( const uint8_t rankfile )
{
    uint8_t col  = rankfile &  7;
    uint8_t row  = rankfile >> 4;
    uint8_t cell = (row << 3) + col;
    return  cell ;
}


// rf -> x,y
void RankFileToColRow( const uint8_t rankfile, uint8_t& col_, uint8_t& row_ )
{
    col_ = rankfile &  7;
    row_ = rankfile >> 4;
}


const char aFILE[8] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' }; // which Col
const char aRANK[8] = { '1', '2', '3', '4', '5', '6', '7', '8' }; // which Row


char RankFileToFile( const uint8_t rankfile ) { return aFILE[ rankfile & 7 ]; }
char RankFileToRank( const uint8_t rankfile ) { return aRANK[ rankfile / 8 ]; }


    const uint8_t aBitCount8[ 256 ] =
    {
        0, // 00 0000 0000
        1, // 01 0000 0001
        1, // 02 0000 0010
        2, // 03 0000 0011
        1, // 04 0000 0100
        2, // 05 0000 0101
        2, // 06 0000 0110
        3, // 07 0000 0111
        1, // 08 0000 1000
        2, // 09 0000 1001
        2, // 0A 0000 1010
        3, // 0B 0000 1011
        2, // 0C 0000 1100
        3, // 0D 0000 1101
        3, // 0E 0000 1110
        4, // 0F 0000 1111
        1, // 10 0001 0000
        2, // 11 0001 0001
        2, // 12 0001 0010
        3, // 13 0001 0011
        2, // 14 0001 0100
        3, // 15 0001 0101
        3, // 16 0001 0110
        4, // 17 0001 0111
        2, // 18 0001 1000
        3, // 19 0001 1001
        3, // 1A 0001 1010
        4, // 1B 0001 1011
        3, // 1C 0001 1100
        4, // 1D 0001 1101
        4, // 1E 0001 1110
        5, // 1F 0001 1111
        1, // 20 0010 0000
        2, // 21 0010 0001
        2, // 22 0010 0010
        3, // 23 0010 0011
        2, // 24 0010 0100
        3, // 25 0010 0101
        3, // 26 0010 0110
        4, // 27 0010 0111
        2, // 28 0010 1000
        3, // 29 0010 1001
        3, // 2A 0010 1010
        4, // 2B 0010 1011
        3, // 2C 0010 1100
        4, // 2D 0010 1101
        4, // 2E 0010 1110
        5, // 2F 0010 1111
        2, // 30 0011 0000
        3, // 31 0011 0001
        3, // 32 0011 0010
        4, // 33 0011 0011
        3, // 34 0011 0100
        4, // 35 0011 0101
        4, // 36 0011 0110
        5, // 37 0011 0111
        3, // 38 0011 1000
        4, // 39 0011 1001
        4, // 3A 0011 1010
        5, // 3B 0011 1011
        4, // 3C 0011 1100
        5, // 3D 0011 1101
        5, // 3E 0011 1110
        6, // 3F 0011 1111
        1, // 40 0100 0000
        2, // 41 0100 0001
        2, // 42 0100 0010
        3, // 43 0100 0011
        2, // 44 0100 0100
        3, // 45 0100 0101
        3, // 46 0100 0110
        4, // 47 0100 0111
        2, // 48 0100 1000
        3, // 49 0100 1001
        3, // 4A 0100 1010
        4, // 4B 0100 1011
        3, // 4C 0100 1100
        4, // 4D 0100 1101
        4, // 4E 0100 1110
        5, // 4F 0100 1111
        2, // 50 0101 0000
        3, // 51 0101 0001
        3, // 52 0101 0010
        4, // 53 0101 0011
        3, // 54 0101 0100
        4, // 55 0101 0101
        4, // 56 0101 0110
        5, // 57 0101 0111
        3, // 58 0101 1000
        4, // 59 0101 1001
        4, // 5A 0101 1010
        5, // 5B 0101 1011
        4, // 5C 0101 1100
        5, // 5D 0101 1101
        5, // 5E 0101 1110
        6, // 5F 0101 1111
        2, // 60 0110 0000
        3, // 61 0110 0001
        3, // 62 0110 0010
        4, // 63 0110 0011
        3, // 64 0110 0100
        4, // 65 0110 0101
        4, // 66 0110 0110
        5, // 67 0110 0111
        3, // 68 0110 1000
        4, // 69 0110 1001
        4, // 6A 0110 1010
        5, // 6B 0110 1011
        4, // 6C 0110 1100
        5, // 6D 0110 1101
        5, // 6E 0110 1110
        6, // 6F 0110 1111
        3, // 70 0111 0000
        4, // 71 0111 0001
        4, // 72 0111 0010
        5, // 73 0111 0011
        4, // 74 0111 0100
        5, // 75 0111 0101
        5, // 76 0111 0110
        6, // 77 0111 0111
        4, // 78 0111 1000
        5, // 79 0111 1001
        5, // 7A 0111 1010
        6, // 7B 0111 1011
        5, // 7C 0111 1100
        6, // 7D 0111 1101
        6, // 7E 0111 1110
        7, // 7F 0111 1111
        1, // 80 1000 0000
        2, // 81 1000 0001
        2, // 82 1000 0010
        3, // 83 1000 0011
        2, // 84 1000 0100
        3, // 85 1000 0101
        3, // 86 1000 0110
        4, // 87 1000 0111
        2, // 88 1000 1000
        3, // 89 1000 1001
        3, // 8A 1000 1010
        4, // 8B 1000 1011
        3, // 8C 1000 1100
        4, // 8D 1000 1101
        4, // 8E 1000 1110
        5, // 8F 1000 1111
        2, // 90 1001 0000
        3, // 91 1001 0001
        3, // 92 1001 0010
        4, // 93 1001 0011
        3, // 94 1001 0100
        4, // 95 1001 0101
        4, // 96 1001 0110
        5, // 97 1001 0111
        3, // 98 1001 1000
        4, // 99 1001 1001
        4, // 9A 1001 1010
        5, // 9B 1001 1011
        4, // 9C 1001 1100
        5, // 9D 1001 1101
        5, // 9E 1001 1110
        6, // 9F 1001 1111
        2, // A0 1010 0000
        3, // A1 1010 0001
        3, // A2 1010 0010
        4, // A3 1010 0011
        3, // A4 1010 0100
        4, // A5 1010 0101
        4, // A6 1010 0110
        5, // A7 1010 0111
        3, // A8 1010 1000
        4, // A9 1010 1001
        4, // AA 1010 1010
        5, // AB 1010 1011
        4, // AC 1010 1100
        5, // AD 1010 1101
        5, // AE 1010 1110
        6, // AF 1010 1111
        3, // B0 1011 0000
        4, // B1 1011 0001
        4, // B2 1011 0010
        5, // B3 1011 0011
        4, // B4 1011 0100
        5, // B5 1011 0101
        5, // B6 1011 0110
        6, // B7 1011 0111
        4, // B8 1011 1000
        5, // B9 1011 1001
        5, // BA 1011 1010
        6, // BB 1011 1011
        5, // BC 1011 1100
        6, // BD 1011 1101
        6, // BE 1011 1110
        7, // BF 1011 1111
        2, // C0 1100 0000
        3, // C1 1100 0001
        3, // C2 1100 0010
        4, // C3 1100 0011
        3, // C4 1100 0100
        4, // C5 1100 0101
        4, // C6 1100 0110
        5, // C7 1100 0111
        3, // C8 1100 1000
        4, // C9 1100 1001
        4, // CA 1100 1010
        5, // CB 1100 1011
        4, // CC 1100 1100
        5, // CD 1100 1101
        5, // CE 1100 1110
        6, // CF 1100 1111
        3, // D0 1101 0000
        4, // D1 1101 0001
        4, // D2 1101 0010
        5, // D3 1101 0011
        4, // D4 1101 0100
        5, // D5 1101 0101
        5, // D6 1101 0110
        6, // D7 1101 0111
        4, // D8 1101 1000
        5, // D9 1101 1001
        5, // DA 1101 1010
        6, // DB 1101 1011
        5, // DC 1101 1100
        6, // DD 1101 1101
        6, // DE 1101 1110
        7, // DF 1101 1111
        3, // E0 1110 0000
        4, // E1 1110 0001
        4, // E2 1110 0010
        5, // E3 1110 0011
        4, // E4 1110 0100
        5, // E5 1110 0101
        5, // E6 1110 0110
        6, // E7 1110 0111
        4, // E8 1110 1000
        5, // E9 1110 1001
        5, // EA 1110 1010
        6, // EB 1110 1011
        5, // EC 1110 1100
        6, // ED 1110 1101
        6, // EE 1110 1110
        7, // EF 1110 1111
        4, // F0 1111 0000
        5, // F1 1111 0001
        5, // F2 1111 0010
        6, // F3 1111 0011
        5, // F4 1111 0100
        6, // F5 1111 0101
        6, // F6 1111 0110
        7, // F7 1111 0111
        5, // F8 1111 1000
        6, // F9 1111 1001
        6, // FA 1111 1010
        7, // FB 1111 1011
        6, // FC 1111 1100
        7, // FD 1111 1101
        7, // FE 1111 1110
        8, // FF 1111 1111
    };

#if 1
    inline uint8_t bitcount4( uint8_t x )
    {
        const uint8_t aBitCount4[ 16 ] = {
            0, // 00 0000 0000 
            1, // 01 0000 0001
            1, // 02 0000 0010 
            2, // 03 0000 0011 
            1, // 04 0000 0100 
            2, // 05 0000 0101 
            2, // 06 0000 0110 
            3, // 07 0000 0111 
            1, // 08 0000 1000 
            2, // 09 0000 1001 
            2, // 0A 0000 1010
            3, // 0B 0000 1011
            2, // 0C 0000 1100
            3, // 0D 0000 1101
            3, // 0E 0000 1110
            4  // 0F 0000 1111
        };
        uint8_t total = 
            aBitCount4[ (x >> 0) & 0xF ]
        +   aBitCount4[ (x >> 4) & 0xF ];
        return total;   
    }

    void make_bitcount8()
    {
        for( int byte = 0; byte < 256; byte++ )
        {
            int bits = bitcount4( byte );
            printf( "%d, // %02X %d%d%d%d %d%d%d%d\n"
                , bits
                , byte
                , (byte >> 7) & 1
                , (byte >> 6) & 1
                , (byte >> 5) & 1
                , (byte >> 4) & 1
                , (byte >> 3) & 1
                , (byte >> 2) & 1
                , (byte >> 1) & 1
                , (byte >> 0) & 1
            );
        }
    }
#endif

/** popcnt
  References:
    https://oeis.org/A000120
    http://www.strchr.com/crc32_popcnt
    https://github.com/WojciechMula/sse-popcount
*/
inline uint8_t bitcount( uint8_t x )
{
    return aBitCount8[ (x >>  0) & 0xFF ];
}

inline uint8_t bitcount( uint16_t x )
{
    return aBitCount8[ (x >>  0) & 0xFF ]
    +      aBitCount8[ (x >>  8) & 0xFF ];
}

inline uint8_t bitcount( uint32_t x )
{
    return aBitCount8[ (x >>  0) & 0xFF ]
    +      aBitCount8[ (x >>  8) & 0xFF ]
    +      aBitCount8[ (x >> 16) & 0xFF ]
    +      aBitCount8[ (x >> 24) & 0xFF ];
}

inline uint8_t bitcount( uint64_t x )
{
#ifdef _MSVC_VER
    return __popcnt64( x );
#endif
#if __GNUC__
    __asm__ ("popcnt %1, %0" : "=r" (x) : "0" (x));
    return x;
#else
    // gcc: return _popcnt64
    return aBitCount8[ (x >>  0) & 0xFF ]
    +      aBitCount8[ (x >>  8) & 0xFF ]
    +      aBitCount8[ (x >> 16) & 0xFF ]
    +      aBitCount8[ (x >> 24) & 0xFF ]
    +      aBitCount8[ (x >> 32) & 0xFF ]
    +      aBitCount8[ (x >> 40) & 0xFF ]
    +      aBitCount8[ (x >> 48) & 0xFF ]
    +      aBitCount8[ (x >> 56) & 0xFF ];
#endif
}

